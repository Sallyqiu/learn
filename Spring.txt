Spring

IoC/DI：文章 http://www.ibm.com/developerworks/cn/java/wa-spring1/
1  Bean生命周期（bean设置细节）
-----Bean的生命周期非常简单。 
Java的关键词new用来实例化Bean（或许他是非序列化的）。这样就够用了。 
相反，Bean的生命周期在Spring容器中更加细致。 
理解Spring Bean的生命周期非常重要，因为你或许要利用Spring提供的机会来订制Bean的创建过程。
1.容器寻找Bean的定义信息并且将其实例化。
2.受用依赖注入，Spring按照Bean定义信息配置Bean的所有属性。
3.如果Bean实现了BeanNameAware接口，工厂调用Bean的setBeanName()方法传递Bean的ID。
4.如果Bean实现了BeanFactoryAware接口，工厂调用setBeanFactory()方法传入工厂自身。
5.如果BeanPostProcessor和Bean关联，那么它们的postProcessBeforeInitialzation()方法将被调用。
6.如果Bean指定了init-method方法，它将被调用。
7.最后，如果有BeanPsotProcessor和Bean关联，那么它们的postProcessAfterInitialization()方法将被调用。 
到这个时候，Bean已经可以被应用系统使用了，并且将被保留在Bean Factory中知道它不再需要。
有两种方法可以把它从Bean Factory中删除掉。
1.如果Bean实现了DisposableBean接口，destory()方法被调用。
2.如果指定了订制的销毁方法，就调用这个方法。
Bean在Spring应用上下文的生命周期与在Bean工厂中的生命周期只有一点不同， 
唯一不同的是，如果Bean实现了ApplicationContextAwre接口，setApplicationContext()方法被调用。
只有singleton行为的bean接受容器管理生命周期。 
non-singleton行为的bean，Spring容器仅仅是new的替代，容器只负责创建。

对于singleton bean，Spring容器知道bean何时实例化结束，何时销毁， 
Spring可以管理实例化结束之后，和销毁之前的行为，管理bean的生命周期行为主要未如下两个时机： 
Bean全部依赖注入之后 
Bean即将销毁之前
1）依赖关系注入后的行为实现： 
有两种方法：A.编写init方法  B.实现InitializingBean接口 
afterPropertiesSet和init同时出现，前者先于后者执行，使用init方法，需要对配置文件加入init-method属性
2）bean销毁之前的行为 
有两种方法：A.编写close方法  B.实现DisposableBean接口 
destroy和close同时出现，前者先于后者执行，使用close方法，需要对配置文件加入destroy-method属性







2  bean注入方式？
----------Spring中依赖注入有三种注入方式：
一、构造器注入；
这种方式的注入是指带有参数的构造函数注入，看下面的例子，我创建了两个成员变量 SpringDao和User，但是并未设置对象的set方法，所以就不能支持第一种注入方式，这里的注入方式是在SpringAction的构造函数中注入，也就是说在创建SpringAction对象时要将SpringDao和User两个参数值传进来：
在XML文件中同样不用<property>的形式，而是使用<constructor-arg>标签，ref属性同样指向其它<bean>标签的name属性
解决构造方法参数的不确定性，你可能会遇到构造方法传入的两参数都是同类型的，为 了分清哪个该赋对应值，则需要进行一些小处理
二、设值注入（setter方式注入）；
spring有多种依赖注入的形式，下面仅介绍spring通过xml进行IOC配置的方式：  ?  Set注入    这是最简单的注入方式，假设有一个SpringAction，类中需要实例化一个SpringDao 对象，那么就可以定义一个private的SpringDao成员变量，然后创建SpringDao的set方法（这是ioc的注入入口）
随后编写spring的xml文件，<bean>中的name属性是class属性的一个别名，class属性指类的全名，因为在SpringAction中有一个公共属性Springdao，所以要在<bean>标签中创建一个<property>标签指定SpringDao。<property>标签中的name就是
SpringAction类中的SpringDao属性名，ref指下面<bean?name="springDao"...>，这样其实是spring将SpringDaoImpl对象实例化并且调用SpringAction的setSpringdao方法将springdao注入

三、Feild方式注入（注解方式注入）。
 
一、构造器注入
     构造器注入顾名思义就是在程序组件中实现构造器，构造器可以是一个也可以是多个。废话不多说，直接上代码。
二、设值注入（setter方式注入）
设值注入就是通过setXxxx方法将bean注入到组件中
采用设置注入只要有setter方法即可，但是有时由于编程习惯也会讲getter方法引进，但是要清楚：设值注入与getter方法无关。这里还有一点需要注意，那就是能使用基本类型，如果非要使用基本类型的话就要使用其对应的包装类型
 设值注入采用的是<property>标签元素，其中的name属性对应的是要注入的变量名，type属性值对应的该变量的类型，可以是自定义类或者包装类型。value属性对应的是相应的值，还有一个ref属性，该属性值对应的是bean。
---- 静态工厂的方法注入    静态工厂顾名思义，就是通过调用静态工厂的方法来获取自己需要的对象，为了让 spring管理所有对象，我们不能直接通过"工程类.静态方法()"来获取对象，而是依然通过spring注入的形式获取





3  为何要使用spring？
 --------------◆目的：解决企业应用开发的复杂性

　　◆功能：使用基本的JavaBean代替EJB，并提供了更多的企业应用功能

　　◆范围：任何Java应用
　　　简单来说，Spring是一个轻量级的控制反转(IoC)和面向切面(AOP)的容器框架。
2.轻量　　从大小与开销两方面而言Spring都是轻量的。完整的Spring框架可以在一个大小只有1MB多的JAR文件里发布。并且Spring所需的处理开销也是微不足道的。此外，Spring是非侵入式的：典型地，Spring应用中的对象不依赖于Spring的特定类。

　　3.控制反转　　Spring通过一种称作控制反转（IoC）的技术促进了松耦合。当应用了IoC，一个对象依赖的其它对象会通过被动的方式传递进来，而不是这个对象自己创建或者查找依赖对象。你可以认为IoC与JNDI相反——不是对象从容器中查找依赖，而是容器在对象初始化时不等对象请求就主动将依赖传递给它。

　　4.面向切面　　Spring提供了面向切面编程的丰富支持，允许通过分离应用的业务逻辑与系统级服务（例如审计（auditing）和事务（transaction）管理）进行内聚性的开发。应用对象只实现它们应该做的——完成业务逻辑——仅此而已。它们并不负责（甚至是意识）其它的系统级关注点，例如日志或事务支持。

　　5.容器　　Spring包含并管理应用对象的配置和生命周期，在这个意义上它是一种容器，你可以配置你的每个bean如何被创建——基于一个可配置原型（prototype），你的bean可以创建一个单独的实例或者每次需要时都生成一个新的实例——以及它们是如何相互关联的。然而，Spring不应该被混同于传统的重量级的EJB容器，它们经常是庞大与笨重的，难以使用。

　　6.框架　　Spring可以将简单的组件配置、组合成为复杂的应用。在Spring中，应用对象被声明式地组合，典型地是在一个XML文件里。Spring也提供了很多基础功能（事务管理、持久化框架集成等等），将应用逻辑的开发留给了你。
     Spring封装了更多的重复和复杂，不但封装了工厂，并且封装了创建时出现的线程安全问题，Spring可以管理Connection，在使用hibernate的时候我们需要管理session，一线程一session，session连接我们lazy的有效期，spring提供一个Filter，我们不用再管理session的创建和销毁，spring帮我们去管理了。
简单的来说，Spring是一个轻量级的控制反转（IOC）和面向切面（AOP）的容器框架。
Spring可以将简单的组件配置，组成为复杂的应用，在Spring中应用对象被声明式组合，典型地是在一个XML文件里，Spring提供了很多基础功能（事务管理、持久化框架集成等等），将应用逻辑的开发留给了我们。


4  简单设计模式：工厂模式、单例模式、适配器模式、构造器模式（建造者模式），写程序使用上述设计模式

5  jdk各个版本区别＊
----------SE 标准版   从JDK5.0开始改名为JAVA SE
 EE  企业版从5.0开始
ME  主要移动设备  从5.0开始
  JDK各个版本的新特性： 
 jdk1.5的新特性
1.静态导入（import static）  import语句可以导入一个类或是某个包中的所有类。  import static 语句可以导入一个类中的某个静态方法或是所有静态方法
2.泛型（Generic）  在JDK1.5之前，在Java集合容器中（如：List）可以讲任何类型的对象加入到其中，此时被加入的对象被视为Object来看待。当从集合容器取出对象时，需要程序员自行保证对象类型的强制转换。
3.For-Each循环（增强型for循环）  JDK1.5中，For-Each循环的加入简化了集合的遍历。假设我们要遍历一个集合对其中的元素进行一些处理
4.自动装包/拆包（Autoboxing/unboxing）  自动装包/拆包大大方便了基本类型数据和它们包装类地使用。   自动装包：基本类型自动转为包装类.(int >> Integer)   自动拆包：包装类自动转为基本类型.(Integer >> int)
5.枚举（Enums）  JDK1.5加入了一个全新类型的“类”－枚举类型。为此JDK1.5引入了一个新关键字enmu. 我们可以这样来定义一个枚举类型。
6.可变参数（Varargs）  可变参数使程序员可以声明一个接受可变数目参数的方法（类似于多个方法重载，只不过是可变参数提供一个方法实现多个方法的重载，变得只是方法其中的参数）。  注意：可变参数必须是函数声明中的最后一个参数。
JDK1.6新特性：
1.DestTop类和SystemTray类  前者用于调度操作系统中的一些功能，例如： · 可以打开系统默认浏览器指定的URL地址； · 打开系统默认邮件客户端给指定的邮箱发信息； · 用默认程序打开或编辑文件； · 用系统默认的打印机打印文档。  后者可用来在系统托盘区创建一个托盘程序。
2.使用JAXB2来实现对象与XML之间的映射  JAXB是Java Architecture for XML Binding的简写。JAXB是一个业界的标准，是一项可以根据XML Schema产生Java类的技术。JAXB提供了快速而简便的方法将XML模式绑定到Java表示，从而使得Java开发者在Java应用程序中能方便地结合XML数据和处理函数。  原来JAXB是Java EE的一部分，在JDK6中，SUN将其放到了Java SE中
3.StAX  StAX是JDK1.6中除了DOM和SAX之外的有一种处理XML文档的API。  StAX是The Streaming API for XML的缩写。由于JDK6.0中的JAXB2和JAX-WS 2.0都会用到StAX，所以Sun决定把StAX加入到JAXP家族当中来，并将JAXP的版本升级到1.4.   JDK6里面JAXP的版本就是1.4。JAXP是Java API for XML Processing的英文字头缩写,中文含义是:用于XML文档处理的使用Java语言编写的编程接口
4.使用Complier API  现在我们可以用JDK1.6 的Compiler API动态编译Java源文件，Compiler API结合反射功能就可以实现动态的产生Java代码并编译执行这些代码，有点动态语言的特征。  这个特性对于某些需要用到动态编译的应用程序相当有用， 比如JSP Web Server，当我们手动修改JSP后，是不希望需要重启Web Server才可以看到效果的，这时候我们就可以用Compiler API来实现动态编译JSP文件。     5.轻量级的Http Server API  JDK6 提供了一个简单的Http Server API,据此我们可以构建自己的嵌入式Http Server,它支持Http和Https协议,提供了HTTP1.1的部分实现，没有被实现的那部分可以通过扩展已有的Http Server API来实现。     6.插入式注解处理API(Pluggable Annotation Processing API)  JSR （JSR是Java Specification Requests的缩写，意思是Java 规范请求）用 Annotation Processor在编译期间而不是运行期间处理Annotation, Annotation Processor相当于编译器的一个插件,所以称为插入式注解处理
7.用Console开发控制台程序  JDK6中提供了java.io.Console 类专用来访问基于字符的控制台设备. 你的程序如果要与Windows下的cmd或者Linux下的Terminal交互,就可以用Console类代劳。     8.对脚本语言的支持  如: ruby, groovy, javascript     9.Common Annotations  Common annotations原本是Java EE 5.0规范的一部分，现在SUN把它的一部分放到了Java SE 6.0中.随着Annotation元数据功能加入到Java SE 5.0里面，很多Java 技术(比如EJB,Web?Services)都会用Annotation部分代替XML文件来配置运行参数，保证Java?SE和Java?EE?各种技术的一致性.
JDK1.7新特性
1.对Java集合（Collections）的增强支持  在JDK1.7之前的版本中，Java集合容器中存取元素的形式如下： 以List、Set、Map集合容器为例
在JDK1.7中，摒弃了Java集合接口的实现类，如：ArrayList、HashSet和HashMap。而是直接采用[]、{}的形式存入对象，采用[]的形式按照索引、键值来获取集合中的对象
2.在Switch中可用String  在之前的版本中是不支持在Switch语句块中用String类型的数据的，这个功能在C#语言中早已被支持，好在JDK1.7中加入了
3.数值可加下划线
  例如：int one_million = 1_000_000;     4.支持二进制文字  例如：int binary = 0b1001_1001;     5.简化了可变参数方法的调用  当程序员试图使用一个不可具体化的可变参数并调用一个*varargs* （可变）方法时，编辑器会生成一个“非安全操作”的警告。     6.自动资源管理

jdk1.8新特性
   Java 8允许我们给接口添加一个非抽象的方法实现，只需要使用 default关键字即可。
    新增lambda表达式
提供函数式接口
    Java 8 允许你使用 :: 关键字来传递方法或者构造函数引用
     我们可以直接在lambda表达式中访问外层的局部变量


6  再次强调ArrayList, LinkedList, HashMap, ConcurrentHashMap的定义和使用

7   GC知识点，
什么样的对象会被gc？
----当对象对当前使用这个对象的应用程序变得不可触及的时候，这个对象就可以被回收了
当Java程序创建对象、数组等引用类型实体时，系统都会在堆内存中为之分配一块内存区，对象就保存在这块内存区中，当这块内存不再被任何引用变量引用时，这块内存就变成垃圾，等待垃圾回收机制进行回收

一个对象创建后被放置在JVM的堆内存中，当永远不再引用这个对象时，它将被JVM在堆内存中回收。被创建的对象不能再生，同时也没有办法通过程序语句释放它们。即当对象在JVM运行空间中无法通过根集合到达(找到)时,这个对象被称为垃圾对象。




gc发生在什么时候？
-----1)当应用程序空闲时,即没有应用线程在运行时,GC会被调用。因为GC在优先级最低的线程中进行,所以当应用忙时,GC线程就不会被调用,但以下条件除外。

　　2)Java堆内存不足时,GC会被调用。当应用线程在运行,并在运行过程中创建新对象,若这时内存空间不足,JVM就会强制地调用GC线程,以便回收内存用于新的分配。若GC一次之后仍不能满足内存分配的要求,JVM会再进行两次GC作进一步的尝试,若仍无法满足要求,则 JVM将报“out of memory”的错误,Java应用将停止。

　　由于是否进行主GC由JVM根据系统环境决定,而系统环境在不断的变化当中,所以主GC的运行具有不确定性,无法预计它何时必然出现,但可以确定的是对一个长期运行的应用来说,其主GC是反复进行的。



程序是否可以控制gc？
 ----程序不可以控制GC，由JVM自动控制
